services:
  server:
    environment:
      - KRB5CCNAME=/tickets/krb5cc_0
      - KRB5_CONFIG=/etc/krb5.conf
      - HADOOP_CONF_DIR=/etc/hadoop
    volumes:
      - kerberos-tickets:/tickets:ro
      - ./hdfs/krb5.conf:/etc/krb5.conf:ro
      - ./hdfs/hadoop-config/core-site.xml:/etc/hadoop/core-site.xml:ro
      - ./hdfs/hadoop-config/hdfs-site.xml:/etc/hadoop/hdfs-site.xml:ro
    depends_on:
      - kerberos-sidecar
  # Kerberos KDC (Key Distribution Center)
  keycloak:
    ports:
      - "8080:8080"
  kdc:
    image: sequenceiq/kerberos:latest
    hostname: kdc.example.com
    entrypoint: [ "/bin/bash", "-c" ]
    command: |
      "
      # Stop services to reconfigure
      /etc/rc.d/init.d/krb5kdc stop
      /etc/rc.d/init.d/kadmin stop

      # Delete old database
      kdb5_util destroy -f -r NODE.DC1.CONSUL

      # Update KDC config
      sed -i 's/NODE.DC1.CONSUL/EXAMPLE.COM/g' /var/kerberos/krb5kdc/kdc.conf

      # Initialize new database
      mkdir -p /var/log/kerberos
      kdb5_util -P masterkey -r EXAMPLE.COM create -s

      # Create principals
      kadmin.local -q 'addprinc -pw admin admin/admin'
      echo '*/admin@EXAMPLE.COM *' > /var/kerberos/krb5kdc/kadm5.acl
      kadmin.local -q 'addprinc -pw password app@EXAMPLE.COM'
      # Missing principal creations
      kadmin.local -q 'addprinc -pw password nn@EXAMPLE.COM'
      kadmin.local -q 'addprinc -pw password dn@EXAMPLE.COM'
      
      # Create keytabs
      kadmin.local -q 'ktadd -k /keytabs/app.keytab app@EXAMPLE.COM'
      kadmin.local -q 'ktadd -k /keytabs/nn.keytab nn@EXAMPLE.COM'
      kadmin.local -q 'ktadd -k /keytabs/dn.keytab dn@EXAMPLE.COM'
      chmod 644 /keytabs/*.keytab

      # Create ready file explicitly
      echo 'Keytab created' > /keytabs/ready
      chmod 644 /keytabs/ready

      # Start services
      /etc/rc.d/init.d/krb5kdc start
      /etc/rc.d/init.d/kadmin start

      # Keep container running
      tail -F /var/log/kerberos/krb5kdc.log
      "
    volumes:
      - ./keytabs:/keytabs
      - ./hdfs/krb5.conf:/etc/krb5.conf:ro
    networks:
      iceberg_rest_tests:
        aliases:
          - kdc.example.com

  # HDFS NameNode with Kerberos
  namenode:
    image: apache/hadoop:3
    hostname: namenode.example.com
    depends_on:
      - kdc
    environment:
      HADOOP_CONF_DIR: /etc/hadoop
      KRB5_CONFIG: /etc/krb5.conf
      HADOOP_OPTS: "-Djava.security.krb5.conf=/etc/krb5.conf"
    volumes:
      - ./hdfs/hadoop-config:/etc/hadoop:ro
      - ./keytabs:/etc/hadoop/keytabs:ro
      - ./hdfs/krb5.conf:/etc/krb5.conf:ro
      - namenode-data:/hadoop/dfs/name
    command: ["hdfs", "namenode"]
    networks:
      iceberg_rest_tests:
        aliases:
          - namenode.example.com

  # HDFS DataNode with Kerberos
  datanode:
    image: apache/hadoop:3
    hostname: datanode.example.com
    depends_on:
      - namenode
      - kdc
    environment:
      HADOOP_CONF_DIR: /etc/hadoop
      HADOOP_SECURITY_AUTHENTICATION: kerberos
      HADOOP_SECURITY_AUTHORIZATION: "true"
      HADOOP_DATANODE_KERBEROS_PRINCIPAL: dn/_HOST@EXAMPLE.COM
      HADOOP_DATANODE_KEYTAB_FILE: /etc/hadoop/keytabs/dn.keytab
    volumes:
      - ./hdfs/hadoop-config:/etc/hadoop:ro
      - ./keytabs:/etc/hadoop/keytabs:ro
      - datanode-data:/hadoop/dfs/data
    command: ["hdfs", "datanode"]
    networks:
      iceberg_rest_tests:
        aliases:
          - datanode.example.com

  # Kerberos authentication sidecar
  kerberos-sidecar:
    image: ubuntu:22.04
    depends_on:
      - kdc
    volumes:
      - kerberos-tickets:/tickets
      - ./keytabs:/keytabs:ro
      # Mount krb5.conf to a different location initially
      - ./hdfs/krb5.conf:/tmp/krb5.conf:ro
    environment:
      - DEBIAN_FRONTEND=noninteractive
    command: >
      bash -c '
        echo "Using mounted krb5.conf:"
        cat /etc/krb5.conf
        # Install Kerberos client
        apt-get update
        apt-get install -y --no-install-recommends krb5-user
        # Now copy our configuration over the installed one
        cp /tmp/krb5.conf /etc/krb5.conf
        # Wait for ready signal
        while [ ! -f /keytabs/ready ]; do
          echo "Waiting for keytab..."
          sleep 5
        done
        echo "running"
        export KRB5CCNAME=/tickets/krb5cc_0
        echo "Using ticket cache: $KRB5CCNAME"

        klist -kte /keytabs/app.keytab
        klist -kte /keytabs/nn.keytab
        klist -kte /keytabs/dn.keytab
      
        kinit -V -kt /keytabs/app.keytab app@EXAMPLE.COM


      
        if [ $? -eq 0 ]; then
          echo "SUCCESS: Authentication worked!"
          klist
          while true; do
            sleep 3600
            kinit -kt /keytabs/app.keytab app
          done
        else
          echo "FAILED: Authentication failed"
          klist
          exit 1
        fi
      '
    networks:
      iceberg_rest_tests:
        aliases:
          - kerberos-sidecar.example.com

  jupyter:
    image: quay.io/jupyter/pyspark-notebook:2024-10-14
    depends_on:
      server:
        condition: service_healthy
    command: start-notebook.sh --NotebookApp.token=''
    volumes:
      - ./notebooks:/home/jovyan/examples/
    networks:
      iceberg_rest_tests:
    ports:
      - "8888:8888"
networks:
  iceberg_rest_tests:
    driver: bridge

volumes:
  namenode-data:
  datanode-data:
  kerberos-tickets:
